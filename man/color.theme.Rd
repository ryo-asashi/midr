% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/color_theme.R
\name{color.theme}
\alias{color.theme}
\alias{make.color.theme}
\alias{set.color.theme}
\alias{get.color.theme}
\alias{plot.color.theme}
\alias{print.color.theme}
\alias{color.theme.info}
\title{Color Themes for Graphics}
\usage{
color.theme(object, ...)

make.color.theme(
  kernel,
  kernel.args = list(),
  options = list(),
  name = NULL,
  source = NULL,
  type = c("sequential", "diverging", "qualitative")
)

set.color.theme(
  kernel,
  kernel.args = list(),
  options = list(),
  name = NULL,
  source = NULL,
  type = NULL
)

get.color.theme(name, source = NULL, type = NULL, reverse = FALSE)

\method{plot}{color.theme}(x, n = NULL, text = x$name, ...)

\method{print}{color.theme}(x, display = TRUE, ...)

color.theme.info()
}
\arguments{
\item{object}{one of the following: (i) a color theme name with a prefix for the source (e.g., "grDevices#RdBu") and a suffix for the color theme options; "_r" for reversing (e.g., "RdBu_r"), "@q", "@qual", "@d", "@div", "@s", or "@seq" for type modification (e.g., "RdBu@qual"); (ii) a character vector of color names, a palette function, or a ramp function to be used as a color kernel to create a color theme; (iii) a "color.theme" object.}

\item{...}{optional arguments to be passed to \code{make.color.theme()} or \code{get.color.theme()}.}

\item{kernel}{a palette function, ramp function or color vector, which is used in the palette and ramp methods of the color theme.}

\item{kernel.args}{a list containing the argument values to be passed to the kernel function.}

\item{options}{a list of option values to control the color theme's behavior.}

\item{name}{a character string for the color theme name.}

\item{source}{a character string for the source name of the color theme.}

\item{type}{a character string specifying the type of the color theme: One of "sequential", "qualitative" or "diverging".}

\item{reverse}{logical. If \code{TRUE}, the reversed color theme is returned.}

\item{x}{a "color.theme" object to be displayed.}

\item{n}{integer. the number of colors.}

\item{text}{a character string to be displayed.}

\item{display}{logical. If \code{TRUE}, colors are displayed in the plot area.}
}
\value{
\code{color.theme()} returns a "color.theme" object containing following components:
\item{ramp}{the function that takes a numeric vector \code{x} of the values within [0, 1] and returns a color name vector.}
\item{palette}{the function that takes an integer \code{n} and returns a color name vector of length \code{n}.}
\item{type}{the type of the color theme; "sequential", "diverging" or "qualitative".}
\item{name}{the name of the color theme.}
}
\description{
\code{color.theme()} returns an object of class "color.theme" that provides two types of color functions.
}
\details{
"color.theme" object is a container of the two types of color functions: \code{palette(n)} returns a color name vector of length \code{n}, and \code{ramp(x)} returns color names for each value of \code{x} within [0, 1].
The color palettes implemented in the following packages are available: \code{grDevices}, \code{viridisLite}, \code{RColorBrewer} and \code{khroma}.
}
\examples{
ct <- color.theme("Mako")
ct$palette(5L)
ct$ramp(seq.int(0, 1, 1/4))
ct <- color.theme("RdBu")
ct$palette(5L)
ct$ramp(seq.int(0, 1, 1/4))
ct <- color.theme("Tableau 10")
ct$palette(10L)
pals <- c("midr", "grayscale", "bluescale", "HCL", "shap")
pals <- unique(c(pals, hcl.pals(), palette.pals()))
pals <- lapply(pals, color.theme)
old.par <- par(no.readonly = TRUE)
par(mfrow = c(5L, 2L))
for (pal in pals) plot(pal, text = paste(pal$name, "-", pal$type))
par(old.par)
}
