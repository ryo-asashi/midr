% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/color_theme.R
\name{color.theme}
\alias{color.theme}
\alias{set.color.theme}
\alias{color.theme.info}
\title{Color Themes for Graphics}
\usage{
color.theme(
  object,
  kernel.args = list(),
  options = list(),
  name = NULL,
  source = NULL,
  type = NULL,
  reverse = FALSE,
  ...
)

set.color.theme(
  kernel,
  kernel.args = list(),
  options = list(),
  name = NULL,
  source = "custom",
  type = NULL
)

color.theme.info()
}
\arguments{
\item{object}{one of the following items: (i) a character string following the theme name syntax (e.g., "grDevices/RdBu@seq", see the "Theme Name Syntax" section), (ii) a character vector of color names, a palette function, or a ramp function to be used as a color kernel to create a color theme, or (iii) a "color.theme" object.}

\item{kernel.args}{a list containing the argument values to be passed to the color kernel.}

\item{options}{a list of option values to control the color theme's behavior (e.g., "palette.reverse", "na.color").}

\item{name}{a character string naming the color theme.}

\item{source}{a character string for the source of the color theme (e.g., a package name).}

\item{type}{a character string specifying the type of the color theme. One of "sequential", "diverging", or "qualitative".}

\item{reverse}{logical. If \code{TRUE}, the order of colors is reversed.}

\item{...}{optional arguments to be passed on to \code{get.theme()}, \code{make.theme()} or \code{modify.theme()}.}

\item{kernel}{a color vector, a palette function, or a ramp function that serves as the basis for generating colors.}
}
\value{
\code{color.theme()} returns a "color.theme" object containing the \code{palette()} and \code{ramp()} functions, along with other metadata about the theme.
}
\description{
The \code{color.theme()} function is the main interface for working with "color.theme" objects. It acts as a dispatcher that, depending on the class of 'object', can retrieve a pre-defined theme by name (see the "Theme Name Syntax" section), create a new theme from a vector of colors or a color-generating function, and modify an existing "color.theme" object.
}
\details{
The "color.theme" object is a special environment that provides two color-generating functions: \code{palette()} and \code{ramp()}.
\itemize{
  \item \code{palette()} takes an integer \code{n} and returns a vector of \code{n} discrete colors. It is primarily intended for qualitative themes, where distinct colors are used to represent categorical data.
  \item \code{ramp()} takes a numeric vector \code{x} with values in the [0, 1] interval, and returns a vector of corresponding colors. It maps numeric values onto a continuous color gradient, making it suitable for sequential and diverging themes.
}
}
\section{Theme Name Syntax}{

When retrieving a theme using a character string, you can use a special syntax to specify the source and apply modifications:

"\code{[(source)/](name)[_r][@(type)][?(query)]}"

\itemize{
  \item source: (Optional) The source package or collection of the theme
    (e.g., "grDevices").
  \item name: the name of the theme (e.g., "RdBu").
  \item "_r": (Optional) a suffix to reverse the color order.
  \item type: (Optional) the desired theme type, which will be matched with "sequential", "diverging" or "qualitative".
  \item query: (Optional) a query string to overwrite the color theme's metadata including specific theme options or kernel arguments. Pairs are in \code{key=value} format and separated by \code{;} or \code{&} (e.g., "...?alpha=0.5;na.color='gray50'"). Possible keys include "name", "source", "type", "reverse" and any item in theme's \code{options} and \code{kernel.args}.
}
}

\examples{
# Retrieve a pre-defined theme
ct <- color.theme("Mako")
ct$palette(5L)
ct$ramp(seq.int(0, 1, 1/4))

# Use special syntax to get a reversed, qualitative theme with alpha value
ct <- color.theme("grDevices/Zissou 1_r@qual?alpha=0.75")
ct$palette(5L)
ct$ramp(seq.int(0, 1, 1/4))

# Create a new theme from a vector of colors
ct <- color.theme(c("#003f5c", "#7a5195", "#ef5675", "#ffa600"))
ct$palette(10L)

# Create a new theme from a palette function
ct <- color.theme(grDevices::rainbow)
ct$palette(10L)
}
